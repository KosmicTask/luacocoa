require 'olua'
require 'olua.lib'
require 'olua.app'
require 'olua.lexer'
require 'markdown'
local table_concat = table.concat 

local VERSION = "0.1"

local OLDOT

--- Stores all the documentation about an OLua method.

@implementation OldotMethod : olua.lib.Object
	@statics
		local class = nil
		local name = ""
		local selector = ""
		local arguments = {}
		local documentation = ""
		local argumentDocumentation = nil
		local returnDocumentation = nil
	@end
	
	- setClass: c
	do
		class = c
	end
	
	- getClass
	do
		return class
	end
	
	- setName: s
	do
		name = s
	end
	
	- name
	do
		return name
	end
	
	- setSelector: s
	do
		selector = s
	end
	
	- selector
	do
		return selector
	end
	
	- setArguments: a
	do
		arguments = a
	end
	
	- arguments
	do
		return arguments
	end
	
	- setArgumentDocumentation: d
	do
		argumentDocumentation = d
	end
	
	- setReturnDocumentation: d
	do
		returnDocumentation = d
	end
	
	- setDocumentation: s
	do
		documentation = s
	end
	
	- documentation
	do
		return documentation
	end
	
	- emitPrettyNameTo: s
	do
		if (#arguments == 0) then
			s[#s+1] = "<code><b>"..selector[1].."</b></code>"
		else
			for i = 1, #arguments do
				local se = selector[i]
				local ae = arguments[i]
				
				s[#s+1] = "<code>"
				if se then
					if (i > 1) then
						s[#s+1] = " "
					end
					s[#s+1] = "<b>"
					s[#s+1] = se
					s[#s+1] = "</b>"
				end
				if not se or (se:sub(-1) ~= ":") then
					s[#s+1] = ","
				end
				s[#s+1] = " </code>"
				
				s[#s+1] = "<i>"
				s[#s+1] = ae
				s[#s+1] = "</i>"
			end
		end
	end
	
	- emitDetailTo: stream
	do
		stream[#stream+1] = "<h3><a name='"
		stream[#stream+1] = name
		stream[#stream+1] = "'>"
		stream[#stream+1] = name:sub(1, 1)
		stream[#stream+1] = " "
		[self emitPrettyNameTo: stream]
		stream[#stream+1] = "</a></h3><dl>"
						
		stream[#stream+1] = "<dd><p>"
		[class emitTo: stream documentation: documentation]
		
		stream[#stream+1] = "</p><dl>"
		if argumentDocumentation then
			stream[#stream+1] = "<dt><b>Parameters:</b></dt><dd>"
			
			for _, a in ipairs(argumentDocumentation) do
				stream[#stream+1] = "<code>"
				stream[#stream+1] = a[1]
				stream[#stream+1] = "</code> - "
				
				[class emitTo: stream documentation: a[2]]
				stream[#stream+1] = "<br>"
			end
			stream[#stream+1] = "</dd>"
		end
				 
		if returnDocumentation then
			stream[#stream+1] = "<dt><b>Returns:</b></dt><dd>"
			
			[class emitTo: stream documentation: returnDocumentation]

			stream[#stream+1] = "</dd>"
		end
		stream[#stream+1] = "</dl>"
				 
		stream[#stream+1] = "</dd></dl>"
	end
@end

--- Stores all the documentation about a OLua category.

@implementation OldotCategory : olua.lib.Object
	@statics	
		local class = nil
		local name = ""
		local documentation = ""
		local methods = {}
	@end
	
	- setClass: c
	do
		class = c
	end
	
	- getClass
	do
		return class
	end
	
	- setName: s
	do
		name = s
	end
	
	- name
	do
		return name
	end
	
	- setDocumentation: s
	do
		documentation = s
	end
	
	- documentation
	do
		return documentation
	end
	
	- findMethod: name
	do
		local method = methods[name]
		if not method then
			method = [[OldotMethod alloc] init]
			methods[name] = method
			[method setName: name]
		end
		return method
	end

	- methods
	do
		local c = {}
		for methodname, _ in pairs(methods) do
			c[#c+1] = methodname
		end
		table.sort(c)
		return c
	end
	
	- emitTo: stream
	do
		stream[#stream+1] = "<a name='"..name.."'>".."</a>"			
		stream[#stream+1] = documentation
		
		for _, methodname in ipairs([self methods]) do
			local method = [self findMethod: methodname]
			[method emitTo: stream]
		end
	end
@end

--- Stores all the documentation about a OLua class.

@implementation OldotClass : olua.lib.Object
	@statics
		local library = nil
		local name = nil
		local superclass = nil
		local categories = {}
	@end
	
	- setLibrary: s do
		library = s
	end
	
	- library do
		return library
	end
	
	- setName: s do
		name = s
	end
	
	- name do
		return name
	end
	
	- setSuperclass: s do
		superclass = s
	end
	
	- superclass
	do
		return superclass
	end
	
	- findCategory: c do
		local category = categories[c]
		if not category then
			category = [[OldotCategory alloc] init]
			categories[c] = category
			[category setName: c]
		end
		return category
	end
	
	- categories
	do
		local c = {}
		for categoryname, _ in pairs(categories) do
			c[#c+1] = categoryname
		end
		table.sort(c)
		return c
	end

	- collectMethodsMatching: pattern
	do
		local methods = {}
		
		for _, categoryname in ipairs([self categories]) do
			local category = [self findCategory: categoryname]
			for _, methodname in ipairs([category methods]) do
				if methodname:find(pattern) then
					methods[#methods+1] = {
						name=methodname,
						method=[category findMethod: methodname]
					}
				end
			end 
		end
		table.sort(methods,
			function(m1, m2)
				return m1.name < m2.name
			end)
			
		return methods
	end
	
	- emitTableHeaderTo: stream withName: name andAnchor: anchor
	do
		stream[#stream+1] = "<a name='"
		stream[#stream+1] = anchor
		stream[#stream+1] = "'></a><table border='1' width='100%' cellpadding='3' cellspacing='0' summary=''>"
		stream[#stream+1] = "<tr bgcolor='#ccccff' class='TableHeadingColor'>"
		stream[#stream+1] = "<th align='left'><font size='+2'>"
		stream[#stream+1] = "<b>"
		stream[#stream+1] = name
		stream[#stream+1] = "</b></font></th></tr>"
	end
	
	- emitTableFooterTo: stream
	do		
		stream[#stream+1] = "</table>"		
	end
	
	- emitMethodSummaryTo: stream containing: methods withName: name andAnchor: anchor
	do
		if (#methods == 0) then
			return
		end
		
		[self emitTableHeaderTo: stream withName: name andAnchor: anchor]
			
		stream[#stream+1] = "<tr><td><dl>"
		for _, m in ipairs(methods) do
			stream[#stream+1] = "<dt><a href='#"
			stream[#stream+1] = m.name
			stream[#stream+1] = "'>"
			stream[#stream+1] = m.name:sub(1, 1)
			stream[#stream+1] = " "
			[m.method emitPrettyNameTo: stream]
			stream[#stream+1] = "</a></dt><dd>"
			
			local doc = [m.method documentation]
			if doc then
				local i = doc:find("\n\n")
				doc = doc:sub(1, i)
			end
			
			[self emitTo: stream documentation: doc]
			stream[#stream+1] = "</dd>"
		end
		stream[#stream+1] = "</dl></td></tr>"
		 
		[self emitTableFooterTo: stream]
	end
	
	- emitMethodDetailTo: stream containing: methods withName: name andAnchor: anchor
	do
		if (#methods == 0) then
			return
		end
		
		[self emitTableHeaderTo: stream withName: name andAnchor: anchor]
		[self emitTableFooterTo: stream]
		
		for _, m in ipairs(methods) do
			[m.method emitDetailTo: stream]
		end
	end
	
	- emitTo: stream documentation: documentation
	do
		local function guessclass(s)
			local c = [OLDOT findClass: s]
			if not c then
				s = library .. "." .. s
				c = [OLDOT findClass: s]
			end
			return c
		end
		
		local function findmethod(class, s)
			if not class then
				class = self
			end
			local m = [class collectMethodsMatching: ("^"..s.."$")]
			if (#m > 0) then
				return m[1]
			end
			return nil
		end
		
		local function guessmethod(class, s)
			local m
			if not s:find("^[-+]") then
				m = findmethod(class, "%-"..s)
				if not m then
					m = findmethod(class, "%+"..s)
				end
			else
				m = findmethod(class, s)
			end

			return m
		end
		
		local function abort(pattern)
			@throw [[OldotUnknownRefException alloc] initWith: pattern
				inClass: self]
		end
		
		local s = markdown(documentation)
			:gsub("^%s*<p>", "")
			:gsub("</p>%s*$", "")
			:gsub("@ref%(([^)]+)%)",
				function(pattern)
					-- Is the pattern fully qualified?
					
					local _, _, c, m = pattern:find("^(.*)>>(.*)$")
					if c then
						-- Assume the method is an object method if not
						-- otherwise specified.
						
						if not m:find("^[-+]") then
							m = "-"..m
						end
						
						local class = guessclass(c)
						if not class then
							abort(pattern)
						end
						local method = guessmethod(class, m)
						if not method then
							abort(pattern)
						end

						return "<code><a href='"..
							[class name]..".html#"..method.name.."'>"..
							[class name].."&gt;&gt;"..method.name.."</a></code>"
					end
					
					-- We have a bare name. Try to guess what it is.
					
					local isclassname = true
					local ismethodname = true
					
					if pattern:find("%.") then
						ismethodname = false
					end
					if pattern:find("%:") then
						isclassname = false
					end
					if pattern:find("^[-+]") then
						isclassname = false
					end
					
					-- Check to see if it's a method we know about.
					
					if ismethodname then
						local m = guessmethod(self, pattern)
						if m then
							return "<code><a href='#"..
								m.name.."'>"..m.name.."</a></code>"
						end
					end
					
					-- Check to see if it's a class.
					
					if isclassname then
						local c = guessclass(pattern)
						
						if c then
							local s = [c name]
							return "<code><a href='"..
								s..".html'>"..s.."</a></code>"
						end
					end
					
					-- Don't know what it is.

					@throw [[OldotUnknownRefException alloc] initWith: pattern
						inClass: self]
				end
			)
		
		stream[#stream+1] = s
	end
	
	- emitTo: stream
	do
		local _, _, library, name = [self name]:find("^([%w%.]+)%.(%w*)$")
		stream[#stream+1] = "<h2>"
		if library then
			stream[#stream+1] = "<font size='-1'>"
			stream[#stream+1] = library
			stream[#stream+1] = "</font></br>Class "
			stream[#stream+1] = name
		else
			name = [self name]
			stream[#stream+1] = "Class "
			stream[#stream+1] = name
		end
		stream[#stream+1] = "</h2>"
		
		do
			local hierarchy = {}
			local c = self
			repeat
				hierarchy[#hierarchy+1] = c
				local scname = [c superclass]
				if not scname then
					break
				end
				c = [OLDOT findClass: scname]
			until not c
			
			local indent = 0
			local s = {"<pre>"}
			
			for i = #hierarchy, 1, -1 do
				local c = hierarchy[i]
				local cname = [c name]
				
				if (i ~= #hierarchy) then
					for j = 0, indent-1 do
						s[#s+1] = "&nbsp;"
					end
					s[#s+1] = "└─ "
					indent = indent + 3
				end
				if (c ~= self) then
					s[#s+1] = "<a href='"
					s[#s+1] = cname
					s[#s+1] = ".html'>"
					s[#s+1] = cname
					s[#s+1] = "</a>"
				else
					s[#s+1] = "<b>"
					s[#s+1] = cname
					s[#s+1] = "</b>"
				end
				s[#s+1] = "</br>"
			end
			s[#s+1] = "</pre>"
			stream[#stream+1] = table_concat(s)
		end
		
		stream[#stream+1] = "<hr>"
		
		local defaultCategory = [self findCategory: "-default-"]
		if defaultCategory then
			[self emitTo: stream documentation: [defaultCategory documentation]]
		end
		
		stream[#stream+1] = "<hr>"
		
		[self emitMethodSummaryTo: stream
			containing: [self collectMethodsMatching: "^%+"]
			withName: "Static Method Summary"
			andAnchor: "static_method_summary"]
		
		[self emitMethodSummaryTo: stream
			containing: [self collectMethodsMatching: "^%-init"]
			withName: "Constructor Summary"
			andAnchor: "constructor_summary"]
		
		[self emitMethodSummaryTo: stream
			containing: [self collectMethodsMatching: "^%-[^i][^n][^i][^t]"]
			withName: "Method Summary"
			andAnchor: "method_summary"]
		
		[self emitMethodDetailTo: stream
			containing: [self collectMethodsMatching: ""]
			withName: "Method Detail"
			andAnchor: "method_detail"]
			
	end
@end


--- Main application class.

@implementation Oldot : olua.app.Application
	@statics
		local stderr = io.stderr
	@end
	
	- init
	do
		[super init]
		[self initUi]
		return self
	end
	
	- name
	do
		return "oldot"
	end
	
	- writeClassDocumentation
	do
		for _, classname in ipairs([self classes]) do
			local class = [self findClass: classname]

			local stream = {
				"<html><head>",
				"<meta http-equiv='Content-Type' content='text/html; charset=utf-8'>",
				"<title>", classname, "</title></head><body>"
			}
			[class emitTo: stream]
			stream[#stream+1] = "</body></html>"
			
			local filename = classname..".html"
			local fp = [self openOutputFile: filename]
			fp:write(table_concat(stream))
			fp:close()
			
			stderr:write(".")
			stderr:flush()
		end
	end
	
	- run
	do
		[self checkArguments]
		
		local files = [self remainingArguments]
		if (#files == 0) then
			[self error: "you must specify at least one input file"]
		end
		
		stderr:write("Reading: ")
		stderr:flush()
		for _, filename in ipairs(files) do
			[self parse: filename]
			stderr:write(".")
			stderr:flush()
		end
		
		local fp = io.stdout
		stderr:write("\nWriting: ")
		stderr:flush()
		[self writeClassDocumentation]
		[self writeIndices]
		stderr:write("\n")
	end
@end

@implementation Oldot (IndexGeneration)
	@statics
		local stderr = io.stderr
	@end
	
	- writeFrameHeader
	do
		local fp = [self openOutputFile: "index.html"]
		fp:write(
				"<html><head>",
				"<meta http-equiv='Content-Type' content='text/html; charset=utf-8'>",
				"<title>", [self title], "</title></head>",
				"<frameset cols='20%,80%' title=''>",
				"<frameset rows='30%,70%' title=''>",
				"<frame src='overview-frame.html' name='packageListFrame' title='All Packages'>",
				"<frame src='allclasses-frame.html' name='packageFrame' title='All classes'>",
				"</frameset>",
				"<frame src='", [self summarypath], "' name='classFrame' title='Description' scrolling='yes'>",
				"<noframes>",
				"<h2>Frame alert</h2>",
				"<p>This document is designed to be viewed using the frames feature. If you see this message, ",
				"you are using a non-frame-capable web client.",
				"<br>Link to <a href='overview-frame.html'>non-frame version</a>.",
				"</noframes>",
				"</frameset>",
				"</html>")
		fp:close()
		stderr:write(".")
		stderr:flush()
	end

	- writePackageList: list
	do
		local fp = [self openOutputFile: "overview-frame.html"]
		fp:write(
				"<html><head>",
				"<meta http-equiv='Content-Type' content='text/html; charset=utf-8'>",
				"<title>Overview</title></head>",
				"<body><h3>", [self title], "</h3>",
				"<a href='", [self summarypath], "' target='classFrame'>Home</a><br>",
				"<a href='allclasses-frame.html' target='packageFrame'>All classes</a><br><br>")
		
		for _, p in ipairs(list) do
			fp:write("<a href='", p, ".html' target='packageFrame'>", p, "</a><br>")
		end
		
		fp:write("</body></html>")
		fp:close()
	end
	
	- writeClassList: list to: filename withTitle: title
	do
		local fp = [self openOutputFile: filename]
		fp:write(
				"<html><head>",
				"<meta http-equiv='Content-Type' content='text/html; charset=utf-8'>",
				"<title>Classes in ", title, "</title></head>",
				"<body><h3>", title, "</h3>")
		
		for _, class in ipairs(list) do
			local _, _, shortname = [class name]:find("([^.]*)$")
			fp:write("<a href='", [class name]..".html", "' target='classFrame'>",
				shortname, "</a><br>")
		end
		
		fp:write("</body></html>")
		fp:close()
	end
	
	- writeIndices
	do
		[self writeFrameHeader]
		
		-- Collect all the packages and what class is in what.
		
		local packages = {}
		for _, classname in ipairs([self classes]) do
			local _, _, p, c = classname:find("^(.*)%.([^.]*)$")
			if not p then
				p = "(default package)"
			end

			local pc = packages[p]
			if not pc then
				pc = {}
				packages[p] = pc
			end
			pc[#pc+1] = [self findClass: classname]
		end
		
		-- Write out the list of packages.
		
		local packagelist = {}
		for p, _ in pairs(packages) do
			packagelist[#packagelist+1] = p
		end
		table.sort(packagelist)
		[self writePackageList: packagelist]
		
		-- Now write out the class list for each package.
		
		for package, pl in pairs(packages) do
			table.sort(pl,
				function(o1, o2)
					return [o1 name] < [o2 name]
				end)
			[self writeClassList: pl to: package..".html" withTitle: package]
		end
		
		-- Now write out the class list for *all* packages.
		
		do
			local allclasses = {}
			for package, pl in pairs(packages) do
				for _, class in ipairs(pl) do
					allclasses[#allclasses+1] = class
				end
			end
			table.sort(allclasses,
				function(o1, o2)
					return [o1 name] < [o2 name]
				end)
			[self writeClassList: allclasses to: "allclasses-frame.html"
				withTitle: "All classes"]
		end
	end
@end

@implementation Oldot (UserInterface)
	@statics
		local outputdir
		local title = "Objective Lua Documentation"
		local summarypath = "about:blank"
	@end
	
	- initUi
	do
		[self addOptions: {"h", "help"}
			withHandler:
				function(arg)
					[self showHelp]
					os.exit(0)
				end]
				
		[self addOptions: {"o", "output"}
			withHandler:
				function(arg)
					outputdir = arg
					return 1
				end]
				
		[self addOptions: {"s", "summary"}
			withHandler:
				function(arg)
					summarypath = arg
					return 1
				end]
				
		[self addOptions: {"t", "title"}
			withHandler:
				function(arg)
					title = arg
					return 1
				end]
	end

	- showHelp
	do
		local stderr = io.stderr
		stderr:write("oldot ", VERSION, "\n")
		stderr:write("Objective Lua documentation tool\n")
		stderr:write("© 2009 David Given\n")
		stderr:write("\n")
		stderr:write("Syntax: oldot [<options>...] <inputfile.olua>...\n")
		stderr:write("   --help       -h     display this message\n")
		stderr:write("   --output X   -oX    specify output directory\n")
		stderr:write("   --summary X  -sX    specify path to overview page\n")
		stderr:write("   --title X    -tX    specify overall title\n")
	end
	
	- checkArguments
	do
		if not outputdir then
			[self error: "You must specify an output directory."]
		end
	end
		
	- openOutputFile: filename
	do
		local f = outputdir.."/"..filename
		local fp, e = io.open(f, "w")
		if not fp then
			[self error: "Unable to open output file %q: %s", filename, e]
		end
		return fp
	end
	
	- title
	do
		return title
	end
	
	- summarypath
	do
		return summarypath
	end
@end

@implementation Oldot (DataStorage)
	@statics
		local classes = {}
	@end
	
	- findClass: classname
	do
		return classes[classname]
	end
	
	- findOrCreateClass: classname
	do
		local class = classes[classname]
		if not class then
			class = [[OldotClass alloc] init]
			classes[classname] = class
			[class setName: classname]
		end
		return class
	end
	
	- classes do
		local c = {}
		for classname, _ in pairs(classes) do
			c[#c+1] = classname
		end
		table.sort(c)
		return c
	end
@end
	
@implementation Oldot (FileParsing) 
	@statics
		local filename
		local doctokens
		local pos
		local currentChunk
		local docChunk
		local argChunk
		local retChunk
		local library
		local category

		local function getdoctokens(s)
			local rawtokens = olua.lexer:getrawtokens(s)
			local doctokens = {}
			
			local newline = true
			for _, t in ipairs(rawtokens) do
				local type = t[1]
				if (type ~= "whitespace") then
					local dt = {}
					dt.text = t[2]
					dt.line = t[3]
					dt.newline = newline
					doctokens[#doctokens+1] = dt
					
					newline = false
				end
				
				if t[2]:find("\n%s*$") then
					newline = true
				end 
			end
			
			return doctokens
		end
		
		local function expect(s)
			local t = doctokens[pos]
			if not t or (t.text ~= s) then
				local linenumber
				if t then
					linenumber = t.line
				end
				
				@throw [[OldotFileSyntaxError alloc] initWithFilename: filename
					andLine: linenumber] 
			end
			
			pos = pos + 1
		end
		
		local function readstring()
			local t = doctokens[pos]
			pos = pos + 1
			
			if not t then
				@throw [[OldotFileSyntaxError alloc] initWithFilename: filename
					andLine: nil]
			end
			
			return t.text
		end
		 
		local function readdotted()
			local st = {}
			
			while true do
				local s = doctokens[pos]
				if not s then
					break
				end
				
				st[#st+1] = s.text
				pos = pos + 1
				
				s = doctokens[pos]
				if not s then
					break
				end
				if (s.text ~= ".") then
					break
				end
				
				st[#st+1] = s.text
				pos = pos + 1
			end
			
			return table_concat(st)
		end
		
		local function reset()
			docChunk = {}
			currentChunk = docChunk
			argChunk = nil
			retChunk = nil
		end
		
		local function documentationline(line)
			local s, e, arg, rest = line:find("^@param%s+(%w+)%s+(.*)$")
			if s then
				if not argChunk then
					argChunk = {}
				end
				
				currentChunk = {}
				argChunk[#argChunk+1] = {arg, currentChunk}
				line = rest
			end
			
			s, e, rest = line:find("^@return%s+(.*)$")
			if s then
				retChunk = {}
				currentChunk = retChunk
				line = rest
			end
			
			currentChunk[#currentChunk + 1] = line
		end
		
		local function doModule(m)
			library = m
		end
		
		local function applymodule(s)
			if s:find("%.") then
				return s
			end
			if library then
				return library .. "." .. s
			end
			return s
		end
		
		local function doImplementationWithSuperclass(subclass, superclass)
			local doc = table_concat(docChunk, "\n")
			reset()
			
			subclass = applymodule(subclass)
			superclass = applymodule(superclass)
			
			local class = [self findOrCreateClass: subclass]
			[class setLibrary: library]
			[class setSuperclass: superclass]
			category = [class findCategory: "-default-"]
			[category setClass: class]
			[category setDocumentation: doc]
		end
		
		local function doImplementationWithCategory(subclass, categoryname)
			local doc = table_concat(docChunk, "\n")
			reset()
			
			subclass = applymodule(subclass)
			
			local class = [self findOrCreateClass: subclass]
			[class setLibrary: library]
			category = [class findCategory: categoryname]
			[category setClass: class]
			[category setDocumentation: doc]
		end
		
		local function doMethodDefinition()
			local doc = table_concat(docChunk, "\n")
			local ret = nil
			if retChunk then
			 	ret = table_concat(retChunk, "\n")
			end
			
			local arg = nil
			if argChunk then
				arg = {}
				for _, a in ipairs(argChunk) do
					arg[#arg+1] = {a[1], table_concat(a[2], "\n")}
				end
			end
			reset()
			
			local classmethod = (doctokens[pos].text == "+")
			pos = pos + 1
			
			local selector = {}
			local args = {}
			
			local t = readstring()
			selector[1] = t
			t = readstring()
			if (t == ":") then
				selector[1] = selector[1] .. ":"
				while true do
					args[#args+1] = readstring()
					t = readstring()
					if (t == ",") or (t == "do") then
						break
					end
					selector[#selector+1] = t .. ":"
					expect(":")
				end
			end
				
			while (t == ",") do
				args[#args+1] = readstring()
				t = readstring()
			end
		
			local name = table_concat(selector)
			
			local method
			if classmethod then
				name = "+"..name
			else
				name = "-"..name
			end
			local method = [category findMethod: name]
			[method setClass: [category getClass]]
			[method setSelector: selector]
			[method setArguments: args]
			[method setArgumentDocumentation: arg]
			[method setReturnDocumentation: ret]
			[method setDocumentation: doc]
		end
		
		local function process()
			local token = doctokens[pos]
			local text = token.text
						
			-- Documentation chunk?
			
			local e, _, m = text:find(
				"^%-%-%-%s(.*)$")
			if e then
				pos = pos + 1
				documentationline(m)
				return
			end
			
			-- Empty line in a documentation chunk?

			local e, _, m = text:find(
				"^%-%-%-$")
			if e then
				pos = pos + 1
				documentationline("")
				return
			end
			
			if (text == "@implementation") then
				local subclass
				
				pos = pos + 1
				subclass = readdotted()
				
				if doctokens[pos] and (doctokens[pos].text == ":") then
					expect(":")
					local superclass = readdotted()
					doImplementationWithSuperclass(subclass, superclass)
				else
					expect("(")
					doImplementationWithCategory(subclass, readstring())
				end
				return
			end
			
			-- These are recognised only at the start of a line.
			
			if token.newline then
				if (text == "module") then
					pos = pos + 1
					expect("(")
					local libname = readstring()
					
					if libname then
						libname = libname:gsub('"', "")
						doModule(libname)
					end
					return
				end
				
				if (text == "-") or (text == "+") then
					doMethodDefinition()
					return
				end
			end
			
			-- Anything else ignore.
			
			pos = pos + 1
		end
	@end
	
	- parse: f
	do
		filename = f
		
		local fp = io.open(filename)
		if not fp then
			[self error: "unable to open input file %q", filename]
		end
		
		reset()
		library = nil		
		doctokens = getdoctokens(fp:read("*a"))
		
		pos = 1
		while (pos <= #doctokens) do
			process()
		end
		
		if (#docChunk > 0) then
			[self error: "orphaned documentation block at end of file"]
		end
		
		fp:close()
	end
@end

@implementation OldotUnknownRefException : olua.app.ApplicationException
	@statics
		local ref
		local class
	@end
	
	- initWith: r inClass: c
	do
		[super init]
		ref = r
		class = c
		return self
	end
	
	- toString
	do
		return "unable to resolve reference '"..ref.."' in class '"..
			[class name].."'"
	end
@end

OLDOT = [[Oldot alloc] init]
return [OLDOT runWithArgs: {...}]
